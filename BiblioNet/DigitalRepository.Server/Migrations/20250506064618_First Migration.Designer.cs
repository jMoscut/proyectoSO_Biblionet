// <auto-generated />
using System;
using DigitalRepository.Server.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalRepository.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250506064618_First Migration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Modulo de Archivos",
                            Image = "file",
                            Name = "Archivos",
                            Path = "Files",
                            State = 1
                        });
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Consultar Documentos",
                            Guid = "6451551a-b05c-455b-b1b9-97616e1c8892",
                            Icon = "list",
                            IsVisible = true,
                            ModuleId = 1L,
                            Name = "Listar Documentos",
                            Path = "Files",
                            Policy = "Files.List",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Creacion de documentos",
                            Guid = "2e26b4ca-bd5d-4c4f-a027-ba09f5bd448f",
                            Icon = "plus",
                            IsVisible = false,
                            ModuleId = 1L,
                            Name = "Cargar Documento",
                            Path = "Files/Create",
                            Policy = "Files.Create",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Descarga de documentos",
                            Guid = "3fd82baf-a73d-4809-8508-60dbec6119b0",
                            Icon = "download",
                            IsVisible = true,
                            ModuleId = 1L,
                            Name = "Descargar Documento",
                            Path = "Files/Download",
                            Policy = "Files.Download",
                            State = 1
                        });
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Rol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Super Administrador",
                            Name = "SA",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Digitalizador",
                            Name = "DG",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Description = "Carga Documentos",
                            Name = "CD",
                            State = 1
                        });
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.RolOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RolId");

                    b.ToTable("RolOperations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 1L,
                            RolId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 2L,
                            RolId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 3L,
                            RolId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 1L,
                            RolId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 2L,
                            RolId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 1L,
                            RolId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            OperationId = 3L,
                            RolId = 3L,
                            State = 1
                        });
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecoveryToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Reset")
                        .HasColumnType("boolean");

                    b.Property<long>("RolId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1L,
                            Email = "pruebas.test29111999@gmail.com",
                            Name = "Super Administrador",
                            Number = "12345678",
                            Password = "$2a$12$86Ty8oUVWKPbU8JqCII9VO.FgM1C10dweQ4xKhM4jj1LWL9jwNu7.",
                            RecoveryToken = "",
                            Reset = false,
                            RolId = 1L,
                            State = 1
                        });
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Operation", b =>
                {
                    b.HasOne("DigitalRepository.Server.Entities.Models.Module", "Module")
                        .WithMany("Operations")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.RolOperation", b =>
                {
                    b.HasOne("DigitalRepository.Server.Entities.Models.Operation", "Operation")
                        .WithMany("RolOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalRepository.Server.Entities.Models.Rol", "Rol")
                        .WithMany("RolOperations")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.User", b =>
                {
                    b.HasOne("DigitalRepository.Server.Entities.Models.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Module", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Operation", b =>
                {
                    b.Navigation("RolOperations");
                });

            modelBuilder.Entity("DigitalRepository.Server.Entities.Models.Rol", b =>
                {
                    b.Navigation("RolOperations");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
